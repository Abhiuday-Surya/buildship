import java.util.stream.Collectors

apply plugin: eclipsebuild.TestBundlePlugin
apply plugin: 'groovy'

dependencies {
    implementation "org.codehaus.groovy:groovy-all:$groovyLibVersion"
    bundled "org.codehaus.groovy:groovy-all:$groovyLibVersion"
    bundled "org.objenesis:objenesis:$objenesisLibVersion"
    bundled "org.spockframework:spock-core:$spockLibVersion"
    bundled "cglib:cglib-nodep:$cglibLibVersion"
    bundled "org.slf4j:slf4j-simple:$slf4jLibVersion"
    bundled 'org.spockframework:spock-core:1.3-groovy-2.5'
    implementation project(':org.eclipse.buildship.compat')
    api project(':org.eclipse.buildship.core')
}

eclipseTest {
    fragmentHost 'org.eclipse.buildship.core'
    applicationName 'org.eclipse.pde.junit.runtime.coretestapplication'
    optionsFile rootProject.project(':org.eclipse.buildship.core').file('.options')
}

def compatibilityCheckClassName = 'org.eclipse.buildship.core.internal.workspace.ImportingProjectCrossVersionTest'
def compatibilityCheckDescriptorPrefix = 'Can return correct import result with Gradle'

tasks.getByName("crossVersionEclipseTest") {
    afterTest { TestDescriptor descriptor, TestResult result ->
        if (descriptor.className == compatibilityCheckClassName &&
                descriptor.name.startsWith(compatibilityCheckDescriptorPrefix) &&
                result.resultType == TestResult.ResultType.FAILURE) {
            def testingGradleVersion = descriptor.name.substring(compatibilityCheckDescriptorPrefix.length()).trim()
            if (project.hasProperty('eclipse.test.java.version')) {
                def javaVersion = project.property('eclipse.test.java.version').toString()
                if (javaVersion != null) {
                    def propertiesFile = file('../org.eclipse.buildship.core/src/main/resources/org/eclipse/buildship/core/internal/gradle/java-unsupported-gradle.properties')
                    Properties properties = new Properties()
                    new FileInputStream(propertiesFile).withCloseable { res ->
                        properties.load(res)
                    }
                    def currentGradleVersions = properties.get(javaVersion)
                    if (currentGradleVersions == null) {
                        properties.put(javaVersion, testingGradleVersion)
                    } else {
                        Set<String> gradleVersions = new HashSet<>(Arrays.asList(((String) currentGradleVersions).split(",")));
                        gradleVersions.add(testingGradleVersion)
                        properties.put(javaVersion, gradleVersions.stream().collect(Collectors.joining(",")))
                    }
                    new FileOutputStream(propertiesFile).withCloseable { res ->
                        properties.store(res, null)
                    }
                }
            }
        }
    }
}
